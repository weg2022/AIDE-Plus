package com.aide.codemodel.language.aidl;

import com.aide.codemodel.JFlexLexer;

import static com.aide.codemodel.Styles.*;


@SuppressWarnings("fallthrough")
public class AidlLexer implements JFlexLexer{

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

	private static int [] zzUnpackcmap_top() {
		int [] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\4"+
    "\1\1\1\5\1\6\1\4\1\7\1\5\1\10\1\11"+
    "\2\12\1\13\1\14\1\12\1\15\1\16\1\17\1\20"+
    "\11\21\1\22\1\12\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\30\1\32\1\33\1\32\5\34\1\35"+
    "\3\34\1\36\7\34\1\37\2\34\1\12\1\40\1\12"+
    "\1\5\1\41\1\4\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\7\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\7\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\12\1\72\1\12"+
    "\1\26\6\0\1\73\32\0\2\4\4\7\4\4\1\7"+
    "\2\4\1\0\7\4\1\7\4\4\1\7\5\4\27\7"+
    "\1\4\37\7\1\4\u01ca\7\4\4\14\7\16\4\5\7"+
    "\7\4\1\7\1\4\1\7\21\4\160\0\5\7\1\4"+
    "\2\7\2\4\4\7\1\4\1\7\6\4\1\7\1\4"+
    "\3\7\1\4\1\7\1\4\24\7\1\4\123\7\1\4"+
    "\213\7\1\4\5\0\2\4\246\7\1\4\46\7\2\4"+
    "\1\7\7\4\47\7\7\4\1\7\1\4\55\0\1\4"+
    "\1\0\1\4\2\0\1\4\2\0\1\4\1\0\10\4"+
    "\33\7\5\4\3\7\15\4\6\0\5\4\1\7\4\4"+
    "\13\0\1\4\1\0\3\4\53\7\37\0\4\4\2\7"+
    "\1\0\143\7\1\4\1\7\10\0\1\4\6\0\2\7"+
    "\2\0\1\4\4\0\2\7\12\0\3\7\2\4\1\7"+
    "\17\4\1\0\1\7\1\0\36\7\33\0\2\4\131\7"+
    "\13\0\1\7\16\4\12\0\41\7\11\0\2\7\4\4"+
    "\1\7\5\4\26\7\4\0\1\7\11\0\1\7\3\0"+
    "\1\7\5\0\22\4\31\7\3\0\4\4\13\7\65\4"+
    "\25\7\1\4\10\7\26\4\60\0\66\7\3\0\1\7"+
    "\22\0\1\7\7\0\12\7\2\0\2\4\12\0\1\4"+
    "\20\7\3\0\1\4\10\7\2\4\2\7\2\4\26\7"+
    "\1\4\7\7\1\4\1\7\3\4\4\7\2\4\1\0"+
    "\1\7\7\0\2\4\2\0\2\4\3\0\1\7\10\4"+
    "\1\0\4\4\2\7\1\4\3\7\2\0\2\4\12\0"+
    "\4\7\7\4\2\7\4\4\3\0\1\4\6\7\4\4"+
    "\2\7\2\4\26\7\1\4\7\7\1\4\2\7\1\4"+
    "\2\7\1\4\2\7\2\4\1\0\1\4\5\0\4\4"+
    "\2\0\2\4\3\0\3\4\1\0\7\4\4\7\1\4"+
    "\1\7\7\4\14\0\3\7\1\0\13\4\3\0\1\4"+
    "\11\7\1\4\3\7\1\4\26\7\1\4\7\7\1\4"+
    "\2\7\1\4\5\7\2\4\1\0\1\7\10\0\1\4"+
    "\3\0\1\4\3\0\2\4\1\7\17\4\2\7\2\0"+
    "\2\4\12\0\1\4\1\7\7\4\1\7\6\0\1\4"+
    "\3\0\1\4\10\7\2\4\2\7\2\4\26\7\1\4"+
    "\7\7\1\4\2\7\1\4\5\7\2\4\1\0\1\7"+
    "\7\0\2\4\2\0\2\4\3\0\10\4\2\0\4\4"+
    "\2\7\1\4\3\7\2\0\2\4\12\0\1\4\1\7"+
    "\20\4\1\0\1\7\1\4\6\7\3\4\3\7\1\4"+
    "\4\7\3\4\2\7\1\4\1\7\1\4\2\7\3\4"+
    "\2\7\3\4\3\7\3\4\14\7\4\4\5\0\3\4"+
    "\3\0\1\4\4\0\2\4\1\7\6\4\1\0\16\4"+
    "\12\0\11\4\1\7\6\4\4\0\1\4\10\7\1\4"+
    "\3\7\1\4\27\7\1\4\20\7\3\4\1\7\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\1\4\3\7"+
    "\5\4\2\7\2\0\2\4\12\0\20\4\1\7\3\0"+
    "\1\4\10\7\1\4\3\7\1\4\27\7\1\4\12\7"+
    "\1\4\5\7\2\4\1\0\1\7\7\0\1\4\3\0"+
    "\1\4\4\0\7\4\2\0\7\4\1\7\1\4\2\7"+
    "\2\0\2\4\12\0\1\4\2\7\15\4\4\0\1\4"+
    "\10\7\1\4\3\7\1\4\51\7\2\0\1\7\7\0"+
    "\1\4\3\0\1\4\4\0\1\7\5\4\3\7\1\0"+
    "\7\4\3\7\2\0\2\4\12\0\12\4\6\7\2\4"+
    "\2\0\1\4\22\7\3\4\30\7\1\4\11\7\1\4"+
    "\1\7\2\4\7\7\3\4\1\0\4\4\6\0\1\4"+
    "\1\0\1\4\10\0\6\4\12\0\2\4\2\0\15\4"+
    "\60\7\1\0\2\7\7\0\4\4\10\7\10\0\1\4"+
    "\12\0\47\4\2\7\1\4\1\7\2\4\2\7\1\4"+
    "\1\7\2\4\1\7\6\4\4\7\1\4\7\7\1\4"+
    "\3\7\1\4\1\7\1\4\1\7\2\4\2\7\1\4"+
    "\4\7\1\0\2\7\6\0\1\4\2\0\1\7\2\4"+
    "\5\7\1\4\1\7\1\4\6\0\2\4\12\0\2\4"+
    "\4\7\40\4\1\7\27\4\2\0\6\4\12\0\13\4"+
    "\1\0\1\4\1\0\1\4\1\0\4\4\2\0\10\7"+
    "\1\4\44\7\4\4\24\0\1\4\2\0\5\7\13\0"+
    "\1\4\44\0\11\4\1\0\71\4\53\7\24\0\1\7"+
    "\12\0\6\4\6\7\4\0\4\7\3\0\1\7\3\0"+
    "\2\7\7\0\3\7\4\0\15\7\14\0\1\7\17\0"+
    "\2\4\46\7\1\4\1\7\5\4\1\7\2\4\53\7"+
    "\1\4\115\7\1\4\4\7\2\4\7\7\1\4\1\7"+
    "\1\4\4\7\2\4\51\7\1\4\4\7\2\4\41\7"+
    "\1\4\4\7\2\4\7\7\1\4\1\7\1\4\4\7"+
    "\2\4\17\7\1\4\71\7\1\4\4\7\2\4\103\7"+
    "\2\4\3\0\40\4\20\7\20\4\126\7\2\4\6\7"+
    "\3\4\u016c\7\2\4\21\7\1\4\32\7\5\4\113\7"+
    "\3\4\13\7\7\4\15\7\1\4\4\7\3\0\13\4"+
    "\22\7\3\0\13\4\22\7\2\0\14\4\15\7\1\4"+
    "\3\7\1\4\2\0\14\4\64\7\40\0\3\4\1\7"+
    "\3\4\2\7\1\0\2\4\12\0\41\4\4\0\1\4"+
    "\12\0\6\4\130\7\10\4\5\7\2\0\42\7\1\0"+
    "\1\7\5\4\106\7\12\4\37\7\1\4\14\0\4\4"+
    "\14\0\12\4\12\0\36\7\2\4\5\7\13\4\54\7"+
    "\4\4\32\7\6\4\12\0\46\4\27\7\5\0\4\4"+
    "\65\7\12\0\1\4\35\0\2\4\13\0\6\4\12\0"+
    "\15\4\1\7\10\4\16\0\102\4\5\0\57\7\21\0"+
    "\7\7\4\4\12\0\21\4\11\0\14\4\3\0\36\7"+
    "\15\0\2\7\12\0\54\7\16\0\14\4\44\7\24\0"+
    "\10\4\12\0\3\4\3\7\12\0\44\7\2\4\11\7"+
    "\107\4\3\0\1\4\25\0\4\7\1\0\4\7\3\0"+
    "\2\7\3\0\6\4\300\7\72\0\1\4\5\0\26\7"+
    "\2\4\6\7\2\4\46\7\2\4\6\7\2\4\10\7"+
    "\1\4\1\7\1\4\1\7\1\4\1\7\1\4\37\7"+
    "\2\4\65\7\1\4\7\7\1\4\1\7\3\4\3\7"+
    "\1\4\7\7\3\4\4\7\2\4\6\7\4\4\15\7"+
    "\5\4\3\7\1\4\7\7\16\4\5\0\30\4\2\3"+
    "\5\0\20\4\2\7\23\4\1\7\13\4\5\0\1\4"+
    "\12\0\1\4\1\7\15\4\1\7\20\4\15\7\3\4"+
    "\40\7\20\4\15\0\4\4\1\0\3\4\14\0\21\4"+
    "\1\7\4\4\1\7\2\4\12\7\1\4\1\7\3\4"+
    "\5\7\6\4\1\7\1\4\1\7\1\4\1\7\1\4"+
    "\4\7\1\4\13\7\2\4\4\7\5\4\5\7\4\4"+
    "\1\7\21\4\51\7\u0177\4\57\7\1\4\57\7\1\4"+
    "\205\7\6\4\4\7\3\0\2\7\14\4\46\7\1\4"+
    "\1\7\5\4\1\7\2\4\70\7\7\4\1\7\17\4"+
    "\1\0\27\7\11\4\7\7\1\4\7\7\1\4\7\7"+
    "\1\4\7\7\1\4\7\7\1\4\7\7\1\4\7\7"+
    "\1\4\7\7\1\4\40\0\57\4\1\7\325\4\3\7"+
    "\31\4\11\7\6\0\1\4\5\7\2\4\5\7\4\4"+
    "\126\7\2\4\2\0\2\4\3\7\1\4\132\7\1\4"+
    "\4\7\5\4\52\7\2\4\136\7\21\4\33\7\65\4"+
    "\306\7\112\4\353\7\25\4\215\7\103\4\56\7\2\4"+
    "\15\7\3\4\20\7\12\0\2\7\24\4\57\7\1\0"+
    "\4\4\12\0\1\4\37\7\2\0\120\7\2\0\45\4"+
    "\11\7\2\4\147\7\2\4\44\7\1\4\10\7\77\4"+
    "\13\7\1\0\3\7\1\0\4\7\1\0\27\7\5\0"+
    "\20\4\1\7\7\4\64\7\14\4\2\0\62\7\22\0"+
    "\12\4\12\0\6\4\22\0\6\7\3\4\1\7\1\4"+
    "\1\7\2\4\12\0\34\7\10\0\2\4\27\7\15\0"+
    "\14\4\35\7\3\4\4\0\57\7\16\0\16\4\1\7"+
    "\12\0\6\4\5\7\1\0\12\7\12\0\5\7\1\4"+
    "\51\7\16\0\11\4\3\7\1\0\10\7\2\0\2\4"+
    "\12\0\6\4\27\7\3\4\1\7\3\0\62\7\1\0"+
    "\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0"+
    "\1\7\30\4\3\7\2\4\13\7\5\0\2\4\3\7"+
    "\2\0\12\4\6\7\2\4\6\7\2\4\6\7\11\4"+
    "\7\7\1\4\7\7\1\4\53\7\1\4\12\7\12\4"+
    "\163\7\10\0\1\4\2\0\2\4\12\0\6\4\244\7"+
    "\14\4\27\7\4\4\61\7\4\4\u0100\3\156\7\2\4"+
    "\152\7\46\4\7\7\14\4\5\7\5\4\1\7\1\0"+
    "\12\7\1\4\15\7\1\4\5\7\1\4\1\7\1\4"+
    "\2\7\1\4\2\7\1\4\154\7\41\4\153\7\22\4"+
    "\100\7\2\4\66\7\50\4\15\7\3\4\20\0\20\4"+
    "\20\0\3\4\2\7\30\4\3\7\31\4\1\7\6\4"+
    "\5\7\1\4\207\7\2\4\1\0\4\4\1\7\13\4"+
    "\12\0\7\4\32\7\4\4\1\7\1\4\32\7\13\4"+
    "\131\7\3\4\6\7\2\4\6\7\2\4\6\7\2\4"+
    "\3\7\3\4\2\7\3\4\2\7\22\4\3\0\4\4"+
    "\14\7\1\4\32\7\1\4\23\7\1\4\2\7\1\4"+
    "\17\7\2\4\16\7\42\4\173\7\105\4\65\7\210\4"+
    "\1\0\202\4\35\7\3\4\61\7\17\4\1\0\37\4"+
    "\40\7\15\4\36\7\5\4\46\7\5\0\5\4\36\7"+
    "\2\4\44\7\4\4\10\7\1\4\5\7\52\4\236\7"+
    "\2\4\12\0\6\4\44\7\4\4\44\7\4\4\50\7"+
    "\10\4\64\7\234\4\67\7\11\4\26\7\12\4\10\7"+
    "\230\4\6\7\2\4\1\7\1\4\54\7\1\4\2\7"+
    "\3\4\1\7\2\4\27\7\12\4\27\7\11\4\37\7"+
    "\101\4\23\7\1\4\2\7\12\4\26\7\12\4\32\7"+
    "\106\4\70\7\6\4\2\7\100\4\1\7\3\0\1\4"+
    "\2\0\5\4\4\0\4\7\1\4\3\7\1\4\33\7"+
    "\4\4\3\0\4\4\1\0\40\4\35\7\3\4\35\7"+
    "\43\4\10\7\1\4\34\7\2\0\31\4\66\7\12\4"+
    "\26\7\12\4\23\7\15\4\22\7\156\4\111\7\67\4"+
    "\63\7\15\4\63\7\15\4\3\0\65\7\17\0\37\4"+
    "\12\0\17\4\4\0\55\7\13\0\2\4\1\0\22\4"+
    "\31\7\7\4\12\0\6\4\3\0\44\7\16\0\1\4"+
    "\12\0\20\4\43\7\1\0\2\4\1\7\11\4\3\0"+
    "\60\7\16\0\4\7\5\4\3\0\3\4\12\0\1\7"+
    "\1\4\1\7\43\4\22\7\1\4\31\7\14\0\6\4"+
    "\1\0\101\4\7\7\1\4\1\7\1\4\4\7\1\4"+
    "\17\7\1\4\12\7\7\4\57\7\14\0\5\4\12\0"+
    "\6\4\4\0\1\4\10\7\2\4\2\7\2\4\26\7"+
    "\1\4\7\7\1\4\2\7\1\4\5\7\2\4\1\0"+
    "\1\7\7\0\2\4\2\0\2\4\3\0\2\4\1\7"+
    "\6\4\1\0\5\4\5\7\2\0\2\4\7\0\3\4"+
    "\5\0\213\4\65\7\22\0\4\7\5\4\12\0\46\4"+
    "\60\7\24\0\2\7\1\4\1\7\10\4\12\0\246\4"+
    "\57\7\7\0\2\4\11\0\27\4\4\7\2\0\42\4"+
    "\60\7\21\0\3\4\1\7\13\4\12\0\46\4\53\7"+
    "\15\0\10\4\12\0\66\4\32\7\3\4\17\0\4\4"+
    "\12\0\u0166\4\100\7\12\0\25\4\2\7\12\0\50\7"+
    "\7\0\1\7\4\0\10\4\1\0\10\4\1\7\13\0"+
    "\50\7\2\4\4\7\20\0\46\4\71\7\7\4\11\7"+
    "\1\4\45\7\10\0\1\4\10\0\1\7\17\4\12\0"+
    "\30\4\36\7\2\4\26\0\1\4\16\0\111\4\7\7"+
    "\1\4\2\7\1\4\46\7\6\0\3\4\1\0\1\4"+
    "\2\0\1\4\7\0\1\7\1\0\10\4\12\0\246\4"+
    "\232\7\146\4\157\7\21\4\304\7\274\4\57\7\321\4"+
    "\107\7\271\4\71\7\7\4\37\7\1\4\12\0\146\4"+
    "\36\7\2\4\5\0\13\4\60\7\7\0\11\4\4\7"+
    "\14\4\12\0\11\4\25\7\5\4\23\7\160\4\105\7"+
    "\13\4\1\7\56\0\20\4\4\0\15\7\100\4\2\7"+
    "\36\4\355\7\23\4\363\7\15\4\37\7\121\4\u018c\7"+
    "\4\4\153\7\5\4\15\7\3\4\11\7\7\4\12\7"+
    "\3\4\2\0\1\4\4\0\301\4\5\0\3\4\26\0"+
    "\2\4\7\0\36\4\4\0\224\4\3\0\273\4\125\7"+
    "\1\4\107\7\1\4\2\7\2\4\1\7\2\4\2\7"+
    "\2\4\4\7\1\4\14\7\1\4\1\7\1\4\7\7"+
    "\1\4\101\7\1\4\4\7\2\4\10\7\1\4\7\7"+
    "\1\4\34\7\1\4\4\7\1\4\5\7\1\4\1\7"+
    "\3\4\7\7\1\4\u0154\7\2\4\31\7\1\4\31\7"+
    "\1\4\37\7\1\4\31\7\1\4\37\7\1\4\31\7"+
    "\1\4\37\7\1\4\31\7\1\4\37\7\1\4\31\7"+
    "\1\4\10\7\2\4\151\0\4\4\62\0\10\4\1\0"+
    "\16\4\1\0\26\4\5\0\1\4\17\0\120\4\7\0"+
    "\1\4\21\0\2\4\7\0\1\4\2\0\1\4\5\0"+
    "\325\4\305\7\13\4\7\0\51\4\104\7\7\0\5\4"+
    "\12\0\246\4\4\7\1\4\33\7\1\4\2\7\1\4"+
    "\1\7\2\4\1\7\1\4\12\7\1\4\4\7\1\4"+
    "\1\7\1\4\1\7\6\4\1\7\4\4\1\7\1\4"+
    "\1\7\1\4\1\7\1\4\3\7\1\4\2\7\1\4"+
    "\1\7\2\4\1\7\1\4\1\7\1\4\1\7\1\4"+
    "\1\7\1\4\1\7\1\4\2\7\1\4\1\7\2\4"+
    "\4\7\1\4\7\7\1\4\4\7\1\4\4\7\1\4"+
    "\1\7\1\4\12\7\1\4\21\7\5\4\3\7\1\4"+
    "\5\7\1\4\21\7\104\4\327\7\51\4\65\7\13\4"+
    "\336\7\2\4\u0182\7\16\4\u0131\7\37\4\36\7\343\4"+
    "\1\0\36\4\140\0\200\4\360\0\20\4";

	private static int [] zzUnpackcmap_blocks() {
		int [] result = new int[27904];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\2\1\3\1\5"+
    "\2\2\1\5\1\2\2\6\3\2\1\1\1\7\22\4"+
    "\1\2\3\3\1\0\1\6\2\10\4\6\13\4\1\11"+
    "\10\4\1\11\1\4\1\11\27\4\1\10\1\12\1\6"+
    "\1\0\1\6\23\4\1\11\25\4\1\13\3\4\1\0"+
    "\2\12\1\0\10\4\1\14\24\4\1\10\1\0\7\4"+
    "\1\11\13\4\1\11\2\4\1\15\31\4";

	private static int [] zzUnpackAction() {
		int [] result = new int[229];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\74\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\74\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\74"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\74"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u012c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u012c\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\74\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u012c\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\74\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u1f2c\0\u2cc4\0\u2d00\0\u012c\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc";

	private static int [] zzUnpackRowMap() {
		int [] result = new int[229];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\2\22\1\23\10\24\1\2"+
    "\1\6\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\6\1\34\1\6\1\35\1\6\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\3\6\1\47"+
    "\76\0\2\3\115\0\1\22\47\0\2\5\1\0\3\5"+
    "\1\50\31\5\1\51\33\5\1\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\31\6\1\0\1\6\10\0"+
    "\1\22\13\0\1\22\47\0\2\10\1\0\6\10\1\50"+
    "\26\10\1\52\33\10\14\0\1\22\7\0\1\22\64\0"+
    "\1\22\6\0\2\22\64\0\1\53\1\0\2\54\65\0"+
    "\1\55\3\0\1\56\4\0\1\22\65\0\1\54\1\0"+
    "\2\17\7\0\1\57\1\60\1\61\1\0\1\60\1\0"+
    "\1\62\1\0\1\17\1\0\1\57\1\0\1\60\1\61"+
    "\1\60\4\0\1\60\12\0\1\62\22\0\1\54\1\0"+
    "\2\17\10\0\1\60\1\61\1\0\1\60\3\0\1\17"+
    "\3\0\1\60\1\61\1\60\4\0\1\60\41\0\1\22"+
    "\74\0\1\4\1\22\56\0\1\24\20\0\10\24\1\0"+
    "\31\24\2\0\1\24\6\0\1\24\10\0\2\24\6\0"+
    "\10\24\1\0\31\24\1\0\1\24\1\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\2\6\1\63\16\6"+
    "\1\64\7\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\16\6\1\65\1\6\1\66\6\6"+
    "\1\67\1\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\70\6\6\1\71\2\6"+
    "\1\72\2\6\1\73\1\74\11\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\5\6\1\75"+
    "\10\6\1\76\12\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\13\6\1\77\1\6\1\100"+
    "\10\6\1\101\2\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\102\7\6\1\103"+
    "\1\6\1\104\2\6\1\105\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\16\6\1\106"+
    "\12\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\6\6\1\107\5\6\1\110\1\111\13\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\16\6\1\112\12\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\1\6\1\113\2\6"+
    "\1\114\1\115\15\6\1\116\5\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\15\6\1\117"+
    "\5\6\1\120\5\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\121\16\6\1\122"+
    "\2\6\1\123\5\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\5\6\1\124\15\6\1\125"+
    "\5\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\10\6\1\126\11\6\1\127\1\130\1\6"+
    "\1\131\1\6\1\132\1\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\10\6\1\133\7\6"+
    "\1\134\10\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\15\6\1\135\13\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\1\6"+
    "\1\136\14\6\1\137\12\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\10\6\1\140\20\6"+
    "\1\0\1\6\24\0\1\22\45\0\1\22\1\0\2\5"+
    "\1\0\71\5\2\10\1\0\71\10\16\0\1\11\75\0"+
    "\2\54\10\0\1\60\1\61\5\0\1\54\3\0\1\60"+
    "\1\61\1\60\24\0\13\141\1\142\60\141\2\56\1\0"+
    "\71\56\20\0\2\57\13\0\1\60\3\0\1\57\12\0"+
    "\1\60\33\0\2\143\2\0\2\143\10\0\1\60\6\0"+
    "\1\143\3\0\1\60\1\0\1\60\42\0\1\144\1\0"+
    "\2\145\6\0\4\145\1\0\1\60\3\0\7\145\4\0"+
    "\1\60\17\0\1\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\21\6\1\146\7\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\21\6\1\147"+
    "\7\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\16\6\1\150\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\5\6\1\151"+
    "\23\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\22\6\1\152\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\21\6\1\152"+
    "\1\153\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\105\27\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\1\6"+
    "\1\154\27\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\15\6\1\155\13\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\17\6"+
    "\1\156\11\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\6\6\1\157\22\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\23\6"+
    "\1\160\5\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\21\6\1\152\7\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\23\6"+
    "\1\161\5\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\22\6\1\162\6\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\13\6"+
    "\1\77\15\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\15\6\1\163\13\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\16\6"+
    "\1\164\12\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\20\6\1\107\10\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\22\6"+
    "\1\165\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\17\6\1\166\11\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\16\6"+
    "\1\167\2\6\1\170\1\171\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\15\6\1\172"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\22\6\1\173\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\12\6\1\156"+
    "\16\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\25\6\1\107\3\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\13\6\1\174"+
    "\15\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\5\6\1\175\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\22\6\1\107"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\3\6\1\176\14\6\1\177\10\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\11\6\1\200\4\6\1\201\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\2\6\1\202"+
    "\26\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\22\6\1\203\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\21\6\1\204"+
    "\7\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\16\6\1\205\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\1\6\1\206"+
    "\16\6\1\207\10\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\17\6\1\210\11\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\11\6\1\211\17\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\15\6\1\212\13\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\11\6\1\213\6\6\1\214\10\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\1\6\1\215"+
    "\21\6\1\152\3\6\1\107\1\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\11\6\1\216"+
    "\17\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\20\6\1\217\10\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\11\6\1\220"+
    "\1\6\1\221\15\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\11\6\1\222\17\6\1\0"+
    "\1\6\13\141\1\223\60\141\13\224\1\142\3\224\1\225"+
    "\54\224\20\0\2\143\10\0\1\60\6\0\1\143\3\0"+
    "\1\60\1\0\1\60\44\0\2\226\6\0\4\226\5\0"+
    "\7\226\42\0\1\226\1\0\2\145\6\0\4\145\1\0"+
    "\1\60\1\61\2\0\7\145\4\0\1\60\3\0\1\61"+
    "\13\0\1\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\22\6\1\227\6\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\5\6\1\230\23\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\13\6\1\231\15\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\1\6\1\232\27\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\5\6\1\107\23\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\3\6\1\233\25\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\21\6\1\213\7\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\21\6\1\120\1\234"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\1\235\30\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\1\6\1\236\27\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\2\6\1\222\26\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\14\6\1\237\14\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\5\6\1\240\23\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\1\6\1\241\27\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\1\6\1\120\27\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\6\0\10\6\1\0\16\6\1\107\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\6\0\10\6"+
    "\1\0\13\6\1\242\2\6\1\205\12\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\23\6"+
    "\1\120\5\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\22\6\1\243\6\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\5\6"+
    "\1\244\23\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\7\6\1\107\21\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\11\6"+
    "\1\245\17\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\13\6\1\107\15\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\25\6"+
    "\1\246\3\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\12\6\1\247\16\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\3\6"+
    "\1\250\25\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\24\6\1\251\4\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\22\6"+
    "\1\252\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\13\6\1\253\15\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\23\6"+
    "\1\254\5\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\22\6\1\255\6\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\20\6"+
    "\1\120\10\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\22\6\1\253\6\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\11\6"+
    "\1\256\17\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\5\6\1\105\23\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\22\6"+
    "\1\153\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\3\6\1\257\25\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\21\6"+
    "\1\107\7\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\16\6\1\260\12\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\15\6"+
    "\1\261\13\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\16\6\1\262\12\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\4\6"+
    "\1\107\24\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\263\27\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\13\6"+
    "\1\152\15\6\1\0\1\6\13\141\1\223\3\141\1\264"+
    "\54\141\13\224\1\265\60\224\20\0\2\226\6\0\4\226"+
    "\2\0\1\61\2\0\7\226\10\0\1\61\13\0\1\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\20\6"+
    "\1\266\10\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\20\6\1\267\10\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\5\6"+
    "\1\270\23\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\12\6\1\107\16\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\10\6"+
    "\1\107\20\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\11\6\1\271\17\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\10\6"+
    "\1\272\20\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\23\6\1\273\5\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\15\6"+
    "\1\274\13\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\13\6\1\275\15\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\5\6"+
    "\1\276\23\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\277\27\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\20\6"+
    "\1\300\10\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\24\6\1\152\4\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\1\6"+
    "\1\301\27\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\302\27\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\5\6"+
    "\1\303\23\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\6\1\67\27\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\5\6"+
    "\1\304\23\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\11\6\1\305\17\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\6\0\10\6\1\0\20\6"+
    "\1\262\10\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\6\0\10\6\1\0\1\306\30\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\3\6\1\307"+
    "\25\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\10\6\1\310\20\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\25\6\1\311"+
    "\3\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\21\6\1\312\7\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\6\0\10\6\1\0\15\6\1\107"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\6\0"+
    "\10\6\1\0\22\6\1\140\6\6\1\0\1\6\13\224"+
    "\1\265\3\224\1\225\54\224\1\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\313\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\22\6\1\314\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\262\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\15\6\1\315\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\5\6\1\316\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\13\6\1\120\15\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\4\6\1\213\24\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\13\6\1\301\15\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\14\6\1\317\14\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\15\6\1\320\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\6\6\1\321\22\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\27\6\1\107\1\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\7\6\1\152\21\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\13\6\1\322\15\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\3\6\1\323\25\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\3\6\1\107\25\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\22\6\1\324\6\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\22\6\1\325\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\20\6\1\326\10\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\11\6\1\327\17\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\3\6\1\120\25\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\23\6\1\152\5\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\330\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\5\6\1\331\23\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\3\6\1\332\25\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\1\6\1\333\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\1\6\1\160\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\22\6\1\334\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\27\6\1\335\1\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\6\6\1\336\22\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\16\6\1\337\12\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\5\6\1\340\23\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\4\6\1\210\24\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\15\6\1\341\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\5\6\1\342\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\3\6\1\152\25\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\5\6\1\220\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\17\6\1\152\11\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\17\6\1\107\11\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\15\6\1\343\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\15\6\1\120\13\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\22\6\1\213\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\16\6\1\344\12\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\11\6\1\345\17\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\6\0\10\6\1\0\6\6\1\107\22\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\6\0\10\6\1\0"+
    "\30\6\1\334\1\0\1\6";

	private static int [] zzUnpacktrans() {
		int [] result = new int[13080];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\10\1\1\11\25\1\1\11"+
    "\2\1\1\0\4\1\1\11\63\1\1\0\56\1\1\0"+
    "\1\1\1\11\1\0\35\1\1\11\1\0\60\1";

	private static int [] zzUnpackAttribute() {
		int [] result = new int[229];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	private int yyline;

	/** Number of characters from the last newline up to the start of the matched text. */
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	@SuppressWarnings("unused")
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */
    private boolean myAssertKeyword;
    private boolean myEnumKeyword;
    private boolean myVarKeyword;

    public AidlLexer(){
		this(11);
    }

    public AidlLexer(int level) {
        this((java.io.Reader)null);
        setLevel(level);
	}

	public void setLevel(int level){
		myAssertKeyword = level >= 4;
		myEnumKeyword =level >= 5;
		myVarKeyword = level >=10;
	}

	public int getDefaultState(){
  		return YYINITIAL;
  	}

  	public int getLine(){
  		return yyline;
  	}

  	public int getColumn(){
  		return yycolumn;
  	}



	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public AidlLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}

	/**  Whether the scanner buffer can grow to accommodate a larger token. */
	private boolean zzCanGrow() {
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
							 zzBuffer, 0,
							 zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
			}
			else {
				throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char)c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}


	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}


	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}


	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *     {@link #yylength()}.
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}




	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @exception java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead  ;
				 zzCurrentPosL < zzMarkedPosL ;
			zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
			}


			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos  = zzCurrentPosL;
						zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = zzCurrentPos;
						zzMarkedPosL   = zzMarkedPos;
						zzBufferL      = zzBuffer;
						zzEndReadL     = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return YYEOF;
				}
			}
			else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
						{ return PlainStyle;
						}
						// fall through
					case 14: 
						break;
					case 2:
						{ return OperatorStyle;
						}
						// fall through
					case 15: 
						break;
					case 3:
						{ return StringStyle;
						}
						// fall through
					case 16: 
						break;
					case 4:
						{ return IdentifierStyle;
						}
						// fall through
					case 17: 
						break;
					case 5:
						{ return SeparatorStyle;
						}
						// fall through
					case 18: 
						break;
					case 6:
						{ return NumberStyle;
						}
						// fall through
					case 19: 
						break;
					case 7:
						{ return TypeStyle;
						}
						// fall through
					case 20: 
						break;
					case 8:
						{ return CommentStyle;
						}
						// fall through
					case 21: 
						break;
					case 9:
						{ return KeywordStyle;
						}
						// fall through
					case 22: 
						break;
					case 10:
						{ return DocCommentStyle;
						}
						// fall through
					case 23: 
						break;
					case 11:
						{ return myVarKeyword ? KeywordStyle : PlainStyle;
						}
						// fall through
					case 24: 
						break;
					case 12:
						{ return myEnumKeyword ? KeywordStyle : PlainStyle;
						}
						// fall through
					case 25: break;
					case 13:
						{ return myAssertKeyword ? KeywordStyle : PlainStyle;
						}
						// fall through
					case 26: break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}

